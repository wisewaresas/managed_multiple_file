<?php
/**
 * Implements hook_element_info().
 *
 * The managed file element may be used anywhere in Drupal.
 */
function managed_file_multiple_element_info() {
  $types['managed_file_multiple'] = array(
    '#input' => TRUE,
    '#process' => array('managed_file_multiple_file_process'),
    '#value_callback' => 'file_managed_file_value',
    '#element_validate' => array('file_managed_file_validate'),
    '#pre_render' => array(),
    '#theme' => 'file_managed_file',
    '#theme_wrappers' => array('form_element'),
    '#progress_indicator' => 'throbber',
    '#progress_message' => NULL,
    '#upload_validators' => array(),
    '#upload_location' => NULL,
    '#size' => 22,
    '#extended' => TRUE,
    '#default_value' => array(),
  );
  return $types;
}

function managed_file_multiple_file_process($element, &$form_state, $form) {
  //dpm($element);
  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;

  // Set some default element properties.
  $element['#progress_indicator'] = empty($element['#progress_indicator']) ? 'none' : $element['#progress_indicator'];
  $element['#file'] = $fid ? file_load($fid) : FALSE;
  $element['#tree'] = TRUE;

  $ajax_settings = array(
    'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
    'wrapper' => $element['#id'] . '-ajax-wrapper',
    'effect' => 'fade',
    'progress' => array(
      'type' => $element['#progress_indicator'],
      'message' => $element['#progress_message'],
    ),
  );

  // Set up the buttons first since we need to check if they were clicked.
  $element['upload_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_upload_button',
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#validate' => array(),
    '#submit' => array('file_managed_file_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
  );

  // Force the progress indicator for the remove button to be either 'none' or
  // 'throbber', even if the upload button is using something else.
  $ajax_settings['progress']['type'] = ($element['#progress_indicator'] == 'none') ? 'none' : 'throbber';
  $ajax_settings['progress']['message'] = NULL;
  $ajax_settings['effect'] = 'none';

  $element['fid'] = array(
    '#type' => 'hidden',
    '#value' => 0,
  );

  // The file upload field itself.
  $element['upload'] = array(
    '#name' => 'files[' . implode('_', $element['#parents']) . ']',
    '#type' => 'file',
    '#title' => t('Choose a file'),
    '#title_display' => 'invisible',
    '#size' => $element['#size'],
    '#theme_wrappers' => array(),
    '#weight' => -10,
  );

  $files = isset($element['#value']['files']) ? $element['#value']['files'] : $element['#default_value'];
  if ($element['#file']) {
    $files[$element['#file']->fid] = array(
      'fid' => $element['#file']->fid,
    );
  }

  foreach ($files as $key => $value) {
    $fid = isset($value['fid']) ? $value['fid'] : $value;
    if ($file = file_load($fid)) {
      $element['files'][$fid]['image'] = array(
        '#markup' => theme('file_link', array('file' => $file)),
      );

      $element['files'][$fid]['remove_button'] = array(
        '#name' => implode('_', $element['#parents']) . '_remove_button',
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#validate' => array(),
        '#submit' => array('file_managed_multiple_file_submit'),
        '#limit_validation_errors' => array($element['#parents']),
        '#ajax' => $ajax_settings,
      );

      $element['files'][$fid]['fid'] = array(
        '#type' => 'hidden',
        '#value' => $fid,
        '#prefix' => $fid,
      );
    }
  }

  if (isset($element['files'])) {
    $element['files']['#theme'] = 'file_element_multiple';
  }

  // Add the extension list to the page as JavaScript settings.
  if (isset($element['#upload_validators']['file_validate_extensions'][0])) {
    $extension_list = implode(',', array_filter(explode(' ', $element['#upload_validators']['file_validate_extensions'][0])));
    $element['upload']['#attached']['js'] = array(
      array(
        'type' => 'setting',
        'data' => array('file' => array('elements' => array('#' . $element['#id'] . '-upload' => $extension_list)))
      )
    );
  }

  // Prefix and suffix used for Ajax replacement.
  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';
  $element['#suffix'] = '</div>';

  return $element;
}

function file_managed_multiple_file_submit($form, &$form_state) {
  // Determine whether it was the upload or the remove button that was clicked,
  // and set $element to the managed_file element that contains that button.
  $parents = $form_state['triggering_element']['#array_parents'];
  dpm($parents, 'parents');
  $button_key = array_pop($parents);
  $fid = array_pop($parents);

  //$element = drupal_array_get_nested_value($form, $parents);
  // No action is needed here for the upload button, because all file uploads on
  // the form are processed by file_managed_file_value() regardless of which
  // button was clicked. Action is needed here for the remove button, because we
  // only remove a file in response to its remove button being clicked.
  if ($button_key == 'remove_button' && $file = file_load($fid)) {

    // If it's a temporary file we can safely remove it immediately, otherwise
    // it's up to the implementing module to clean up files that are in use.
    //if ($element['#file'] && $element['#file']->status == 0) {
    if ($file->status == 0) {
      file_delete($file);
    }

    $parents[] = $fid;

    NestedArray::unsetValue($form_state['values'], $parents);

    NestedArray::unsetValue($form_state['input'], $parents);
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * See https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Component%21Utility%21NestedArray.php/class/NestedArray/8
 */
class NestedArray {

  /**
   * Retrieves a value from a nested array with variable depth.
   *
   * This helper function should be used when the depth of the array element
   * being retrieved may vary (that is, the number of parent keys is variable).
   * It is primarily used for form structures and renderable arrays.
   *
   * Without this helper function the only way to get a nested array value with
   * variable depth in one line would be using eval(), which should be avoided:
   * @code
   * // Do not do this! Avoid eval().
   * // May also throw a PHP notice, if the variable array keys do not exist.
   * eval('$value = $array[\'' . implode("']['", $parents) . "'];");
   * @endcode
   *
   * Instead, use this helper function:
   * @code
   * $value = NestedArray::getValue($form, $parents);
   * @endcode
   *
   * The return value will be NULL, regardless of whether the actual value is
   * NULL or whether the requested key does not exist. If it is required to know
   * whether the nested array key actually exists, pass a third argument that is
   * altered by reference:
   * @code
   * $key_exists = NULL;
   * $value = NestedArray::getValue($form, $parents, $key_exists);
   * if ($key_exists) {
   *   // ... do something with $value ...
   * }
   * @endcode
   *
   * However if the number of array parent keys is static, the value should
   * always be retrieved directly rather than calling this function.
   * For instance:
   * @code
   * $value = $form['signature_settings']['signature'];
   * @endcode
   *
   * @param array $array
   *   The array from which to get the value.
   * @param array $parents
   *   An array of parent keys of the value, starting with the outermost key.
   * @param bool $key_exists
   *   (optional) If given, an already defined variable that is altered by
   *   reference.
   *
   * @return mixed
   *   The requested nested value. Possibly NULL if the value is NULL or not all
   *   nested parent keys exist. $key_exists is altered by reference and is a
   *   Boolean that indicates whether all nested parent keys exist (TRUE) or not
   *   (FALSE). This allows to distinguish between the two possibilities when
   *   NULL is returned.
   *
   * @see NestedArray::setValue()
   * @see NestedArray::unsetValue()
   */
  public static function &getValue(array &$array, array $parents, &$key_exists = NULL) {
    $ref = &$array;
    foreach ($parents as $parent) {
      if (is_array($ref) && array_key_exists($parent, $ref)) {
        $ref = &$ref[$parent];
      }
      else {
        $key_exists = FALSE;
        $null = NULL;
        return $null;
      }
    }
    $key_exists = TRUE;
    return $ref;
  }

  /**
   * Sets a value in a nested array with variable depth.
   *
   * This helper function should be used when the depth of the array element you
   * are changing may vary (that is, the number of parent keys is variable). It
   * is primarily used for form structures and renderable arrays.
   *
   * Example:
   * @code
   * // Assume you have a 'signature' element somewhere in a form. It might be:
   * $form['signature_settings']['signature'] = array(
   *   '#type' => 'text_format',
   *   '#title' => t('Signature'),
   * );
   * // Or, it might be further nested:
   * $form['signature_settings']['user']['signature'] = array(
   *   '#type' => 'text_format',
   *   '#title' => t('Signature'),
   * );
   * @endcode
   *
   * To deal with the situation, the code needs to figure out the route to the
   * element, given an array of parents that is either
   * @code array('signature_settings', 'signature') @endcode
   * in the first case or
   * @code array('signature_settings', 'user', 'signature') @endcode
   * in the second case.
   *
   * Without this helper function the only way to set the signature element in
   * one line would be using eval(), which should be avoided:
   * @code
   * // Do not do this! Avoid eval().
   * eval('$form[\'' . implode("']['", $parents) . '\'] = $element;');
   * @endcode
   *
   * Instead, use this helper function:
   * @code
   * NestedArray::setValue($form, $parents, $element);
   * @endcode
   *
   * However if the number of array parent keys is static, the value should
   * always be set directly rather than calling this function. For instance,
   * for the first example we could just do:
   * @code
   * $form['signature_settings']['signature'] = $element;
   * @endcode
   *
   * @param array $array
   *   A reference to the array to modify.
   * @param array $parents
   *   An array of parent keys, starting with the outermost key.
   * @param mixed $value
   *   The value to set.
   * @param bool $force
   *   (optional) If TRUE, the value is forced into the structure even if it
   *   requires the deletion of an already existing non-array parent value. If
   *   FALSE, PHP throws an error if trying to add into a value that is not an
   *   array. Defaults to FALSE.
   *
   * @see NestedArray::unsetValue()
   * @see NestedArray::getValue()
   */
  public static function setValue(array &$array, array $parents, $value, $force = FALSE) {
    $ref = &$array;
    foreach ($parents as $parent) {
      // PHP auto-creates container arrays and NULL entries without error if $ref
      // is NULL, but throws an error if $ref is set, but not an array.
      if ($force && isset($ref) && !is_array($ref)) {
        $ref = array();
      }
      $ref = &$ref[$parent];
    }
    $ref = $value;
  }

  /**
   * Unsets a value in a nested array with variable depth.
   *
   * This helper function should be used when the depth of the array element you
   * are changing may vary (that is, the number of parent keys is variable). It
   * is primarily used for form structures and renderable arrays.
   *
   * Example:
   * @code
   * // Assume you have a 'signature' element somewhere in a form. It might be:
   * $form['signature_settings']['signature'] = array(
   *   '#type' => 'text_format',
   *   '#title' => t('Signature'),
   * );
   * // Or, it might be further nested:
   * $form['signature_settings']['user']['signature'] = array(
   *   '#type' => 'text_format',
   *   '#title' => t('Signature'),
   * );
   * @endcode
   *
   * To deal with the situation, the code needs to figure out the route to the
   * element, given an array of parents that is either
   * @code array('signature_settings', 'signature') @endcode
   * in the first case or
   * @code array('signature_settings', 'user', 'signature') @endcode
   * in the second case.
   *
   * Without this helper function the only way to unset the signature element in
   * one line would be using eval(), which should be avoided:
   * @code
   * // Do not do this! Avoid eval().
   * eval('unset($form[\'' . implode("']['", $parents) . '\']);');
   * @endcode
   *
   * Instead, use this helper function:
   * @code
   * NestedArray::unset_nested_value($form, $parents, $element);
   * @endcode
   *
   * However if the number of array parent keys is static, the value should
   * always be set directly rather than calling this function. For instance, for
   * the first example we could just do:
   * @code
   * unset($form['signature_settings']['signature']);
   * @endcode
   *
   * @param array $array
   *   A reference to the array to modify.
   * @param array $parents
   *   An array of parent keys, starting with the outermost key and including
   *   the key to be unset.
   * @param bool $key_existed
   *   (optional) If given, an already defined variable that is altered by
   *   reference.
   *
   * @see NestedArray::setValue()
   * @see NestedArray::getValue()
   */
  public static function unsetValue(array &$array, array $parents, &$key_existed = NULL) {
    $unset_key = array_pop($parents);
    $ref = &self::getValue($array, $parents, $key_existed);
    if ($key_existed && is_array($ref) && array_key_exists($unset_key, $ref)) {
      $key_existed = TRUE;
      unset($ref[$unset_key]);
    }
    else {
      $key_existed = FALSE;
    }
  }

  /**
   * Determines whether a nested array contains the requested keys.
   *
   * This helper function should be used when the depth of the array element to
   * be checked may vary (that is, the number of parent keys is variable). See
   * NestedArray::setValue() for details. It is primarily used for form
   * structures and renderable arrays.
   *
   * If it is required to also get the value of the checked nested key, use
   * NestedArray::getValue() instead.
   *
   * If the number of array parent keys is static, this helper function is
   * unnecessary and the following code can be used instead:
   * @code
   * $value_exists = isset($form['signature_settings']['signature']);
   * $key_exists = array_key_exists('signature', $form['signature_settings']);
   * @endcode
   *
   * @param array $array
   *   The array with the value to check for.
   * @param array $parents
   *   An array of parent keys of the value, starting with the outermost key.
   *
   * @return bool
   *   TRUE if all the parent keys exist, FALSE otherwise.
   *
   * @see NestedArray::getValue()
   */
  public static function keyExists(array $array, array $parents) {
    // Although this function is similar to PHP's array_key_exists(), its
    // arguments should be consistent with getValue().
    $key_exists = NULL;
    self::getValue($array, $parents, $key_exists);
    return $key_exists;
  }

  /**
   * Merges multiple arrays, recursively, and returns the merged array.
   *
   * This function is similar to PHP's array_merge_recursive() function, but it
   * handles non-array values differently. When merging values that are not both
   * arrays, the latter value replaces the former rather than merging with it.
   *
   * Example:
   * @code
   * $link_options_1 = array('fragment' => 'x', 'attributes' => array('title' => t('X'), 'class' => array('a', 'b')));
   * $link_options_2 = array('fragment' => 'y', 'attributes' => array('title' => t('Y'), 'class' => array('c', 'd')));
   *
   * // This results in array('fragment' => array('x', 'y'), 'attributes' => array('title' => array(t('X'), t('Y')), 'class' => array('a', 'b', 'c', 'd'))).
   * $incorrect = array_merge_recursive($link_options_1, $link_options_2);
   *
   * // This results in array('fragment' => 'y', 'attributes' => array('title' => t('Y'), 'class' => array('a', 'b', 'c', 'd'))).
   * $correct = NestedArray::mergeDeep($link_options_1, $link_options_2);
   * @endcode
   *
   * @param array ...
   *   Arrays to merge.
   *
   * @param bool $preserve_integer_keys
   *   (optional) If given, integer keys will be preserved and merged instead of
   *   appended.
   *
   * @return array
   *   The merged array.
   *
   * @see NestedArray::mergeDeepArray()
   */
  public static function mergeDeep() {
    return self::mergeDeepArray(func_get_args());
  }

  /**
   * Merges multiple arrays, recursively, and returns the merged array.
   *
   * This function is equivalent to NestedArray::mergeDeep(), except the
   * input arrays are passed as a single array parameter rather than a variable
   * parameter list.
   *
   * The following are equivalent:
   * - NestedArray::mergeDeep($a, $b);
   * - NestedArray::mergeDeepArray(array($a, $b));
   *
   * The following are also equivalent:
   * - call_user_func_array('NestedArray::mergeDeep', $arrays_to_merge);
   * - NestedArray::mergeDeepArray($arrays_to_merge);
   *
   * @see NestedArray::mergeDeep()
   */
  public static function mergeDeepArray(array $arrays, $preserve_integer_keys = FALSE) {
    $result = array();
    foreach ($arrays as $array) {
      foreach ($array as $key => $value) {
        // Renumber integer keys as array_merge_recursive() does unless
        // $preserve_integer_keys is set to TRUE. Note that PHP automatically
        // converts array keys that are integer strings (e.g., '1') to integers.
        if (is_integer($key) && !$preserve_integer_keys) {
          $result[] = $value;
        }
        // Recurse when both values are arrays.
        elseif (isset($result[$key]) && is_array($result[$key]) && is_array($value)) {
          $result[$key] = self::mergeDeepArray(array($result[$key], $value), $preserve_integer_keys);
        }
        // Otherwise, use the latter value, overriding any previous value.
        else {
          $result[$key] = $value;
        }
      }
    }
    return $result;
  }

}
